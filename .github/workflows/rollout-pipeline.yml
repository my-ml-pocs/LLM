name: Rollout Pipeline

on:
  push:
    branches:
      - roll-out-*

env:
  DOCKER_REGISTRY: localhost:5000
  APP_NAME: myapp
  Sonar_Url: https://localhost
  Sonar_Token: sonarqube
  security_scan_tool: trivy
  GIT_SHA: ${{ github.sha }}

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Install PHP and Composer
        run: |
          sudo apt-get update
          sudo apt-get install -y php-cli unzip curl
          curl -sS https://getcomposer.org/installer | php
          sudo mv composer.phar /usr/local/bin/composer
      - name: Install Dependencies
        run: composer install

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Build Application
        run: echo "Build step for PHP application"

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Run Unit Tests
        run: ./vendor/bin/phpunit --configuration phpunit.xml

  static-code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Run SonarQube Analysis
        env:
          SONAR_HOST_URL: ${{ env.Sonar_Url }}
          SONAR_TOKEN: ${{ env.Sonar_Token }}
        run: |
          sonar-scanner

  quality-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Check Quality Gate
        run: |
          STATUS=$(curl -s -u ${{ env.Sonar_Token }}: "${{ env.Sonar_Url }}/api/qualitygates/project_status?projectKey=${{ env.APP_NAME }}" | jq -r '.projectStatus.status')
          if [[ "$STATUS" != "OK" && "$STATUS" != "NONE" ]]; then
            echo "Quality Gate failed: $STATUS"
            exit 1
          fi

  docker-build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.GIT_SHA }} .
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.GIT_SHA }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Run Security Scan
        run: trivy image ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.GIT_SHA }}

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Application
        run: |
          if [ -f "helm/values.yaml" ]; then
            helm upgrade --install ${{ env.APP_NAME }} ./helm \
              --set image.repository=${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }} \
              --set image.tag=${{ env.GIT_SHA }}
          elif [ -f "deployment.yaml" ]; then
            case "$(uname -s)" in
              Darwin*) sed -i '' "s|image:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.GIT_SHA }}|" deployment.yaml ;;
              *) sed -i "s|image:.*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.GIT_SHA }}|" deployment.yaml ;;
            esac
            kubectl apply -f deployment.yaml
          else
            echo "No deployment configuration found!"
            exit 1

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback Deployment
        run: echo "Implement rollback mechanism here"